plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        // Minimum version of JDK used to compile
        // This is used really at the compile time.
        languageVersion = JavaLanguageVersion.of(21)
    }
    // Minimum java code version supported
    // This is not really related to which jdk (compiler) should be used in compile time
    sourceCompatibility = JavaVersion.VERSION_21
    // Minimum version of Java Runtime version to execute .class (java byte code)
    targetCompatibility = JavaVersion.VERSION_21
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

dependencies {
    // SpringBoot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'com.google.guava:guava:33.5.0-jre'

    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

    // h2
    runtimeOnly 'com.h2database:h2'
}

tasks.named('test') {
    useJUnitPlatform()
}

/** snippet 에 대한 directory 정의
 * jar 파일 내에 문서를 담는다.
 * 그 과정을 gradle test 로 정의
*/
ext { // 전역 변수
    snippetsDir = file('build/generated-snippets')
}

test {
    // 테스트 결과물 directory 를 snippetDir 로 설정
    outputs.dir snippetsDir
}
